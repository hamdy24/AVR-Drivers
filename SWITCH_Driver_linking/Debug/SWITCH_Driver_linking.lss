
SWITCH_Driver_linking.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000093e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  0000093e  000009b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000f60  00000000  00000000  000009bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d0f  00000000  00000000  0000191c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e3       	ldi	r30, 0x3E	; 62
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 33 04 	call	0x866	; 0x866 <main>
  7a:	0c 94 9d 04 	jmp	0x93a	; 0x93a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_enuInit>:
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	0f 92       	push	r0
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
  8c:	81 e0       	ldi	r24, 0x01	; 1
  8e:	89 83       	std	Y+1, r24	; 0x01
  90:	ea e3       	ldi	r30, 0x3A	; 58
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	85 e5       	ldi	r24, 0x55	; 85
  96:	80 83       	st	Z, r24
  98:	eb e3       	ldi	r30, 0x3B	; 59
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	8a e8       	ldi	r24, 0x8A	; 138
  9e:	80 83       	st	Z, r24
  a0:	e7 e3       	ldi	r30, 0x37	; 55
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	84 e5       	ldi	r24, 0x54	; 84
  a6:	80 83       	st	Z, r24
  a8:	e8 e3       	ldi	r30, 0x38	; 56
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	85 e7       	ldi	r24, 0x75	; 117
  ae:	80 83       	st	Z, r24
  b0:	e4 e3       	ldi	r30, 0x34	; 52
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	85 e9       	ldi	r24, 0x95	; 149
  b6:	80 83       	st	Z, r24
  b8:	e5 e3       	ldi	r30, 0x35	; 53
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	88 e6       	ldi	r24, 0x68	; 104
  be:	80 83       	st	Z, r24
  c0:	e1 e3       	ldi	r30, 0x31	; 49
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	8d e6       	ldi	r24, 0x6D	; 109
  c6:	80 83       	st	Z, r24
  c8:	e2 e3       	ldi	r30, 0x32	; 50
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	8d e4       	ldi	r24, 0x4D	; 77
  ce:	80 83       	st	Z, r24
  d0:	89 81       	ldd	r24, Y+1	; 0x01
  d2:	0f 90       	pop	r0
  d4:	cf 91       	pop	r28
  d6:	df 91       	pop	r29
  d8:	08 95       	ret

000000da <DIO_enuSetPinDirection>:

	return Local_enuErrorStatus;
}

ES_T DIO_enuSetPinDirection(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 Copy_u8PortDirection)
{
  da:	df 93       	push	r29
  dc:	cf 93       	push	r28
  de:	00 d0       	rcall	.+0      	; 0xe0 <DIO_enuSetPinDirection+0x6>
  e0:	00 d0       	rcall	.+0      	; 0xe2 <DIO_enuSetPinDirection+0x8>
  e2:	00 d0       	rcall	.+0      	; 0xe4 <DIO_enuSetPinDirection+0xa>
  e4:	cd b7       	in	r28, 0x3d	; 61
  e6:	de b7       	in	r29, 0x3e	; 62
  e8:	8a 83       	std	Y+2, r24	; 0x02
  ea:	6b 83       	std	Y+3, r22	; 0x03
  ec:	4c 83       	std	Y+4, r20	; 0x04
	ES_T Local_enuErrorStatus = ES_NOK;
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortID <= DIO_u8PORTD
  f2:	8a 81       	ldd	r24, Y+2	; 0x02
  f4:	84 30       	cpi	r24, 0x04	; 4
  f6:	08 f0       	brcs	.+2      	; 0xfa <DIO_enuSetPinDirection+0x20>
  f8:	cf c0       	rjmp	.+414    	; 0x298 <DIO_enuSetPinDirection+0x1be>
  fa:	8b 81       	ldd	r24, Y+3	; 0x03
  fc:	88 30       	cpi	r24, 0x08	; 8
  fe:	08 f0       	brcs	.+2      	; 0x102 <DIO_enuSetPinDirection+0x28>
 100:	cb c0       	rjmp	.+406    	; 0x298 <DIO_enuSetPinDirection+0x1be>
 102:	8c 81       	ldd	r24, Y+4	; 0x04
 104:	82 30       	cpi	r24, 0x02	; 2
 106:	08 f0       	brcs	.+2      	; 0x10a <DIO_enuSetPinDirection+0x30>
 108:	c7 c0       	rjmp	.+398    	; 0x298 <DIO_enuSetPinDirection+0x1be>
			&& Copy_u8PinID <= DIO_u8PIN7
			&& Copy_u8PortDirection <= DIO_u8OUTPUT)
	{
	switch(Copy_u8PortID)
 10a:	8a 81       	ldd	r24, Y+2	; 0x02
 10c:	28 2f       	mov	r18, r24
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	3e 83       	std	Y+6, r19	; 0x06
 112:	2d 83       	std	Y+5, r18	; 0x05
 114:	6d 81       	ldd	r22, Y+5	; 0x05
 116:	7e 81       	ldd	r23, Y+6	; 0x06
 118:	61 30       	cpi	r22, 0x01	; 1
 11a:	71 05       	cpc	r23, r1
 11c:	09 f4       	brne	.+2      	; 0x120 <DIO_enuSetPinDirection+0x46>
 11e:	41 c0       	rjmp	.+130    	; 0x1a2 <DIO_enuSetPinDirection+0xc8>
 120:	8d 81       	ldd	r24, Y+5	; 0x05
 122:	9e 81       	ldd	r25, Y+6	; 0x06
 124:	82 30       	cpi	r24, 0x02	; 2
 126:	91 05       	cpc	r25, r1
 128:	34 f4       	brge	.+12     	; 0x136 <DIO_enuSetPinDirection+0x5c>
 12a:	2d 81       	ldd	r18, Y+5	; 0x05
 12c:	3e 81       	ldd	r19, Y+6	; 0x06
 12e:	21 15       	cp	r18, r1
 130:	31 05       	cpc	r19, r1
 132:	71 f0       	breq	.+28     	; 0x150 <DIO_enuSetPinDirection+0x76>
 134:	b3 c0       	rjmp	.+358    	; 0x29c <DIO_enuSetPinDirection+0x1c2>
 136:	6d 81       	ldd	r22, Y+5	; 0x05
 138:	7e 81       	ldd	r23, Y+6	; 0x06
 13a:	62 30       	cpi	r22, 0x02	; 2
 13c:	71 05       	cpc	r23, r1
 13e:	09 f4       	brne	.+2      	; 0x142 <DIO_enuSetPinDirection+0x68>
 140:	59 c0       	rjmp	.+178    	; 0x1f4 <DIO_enuSetPinDirection+0x11a>
 142:	8d 81       	ldd	r24, Y+5	; 0x05
 144:	9e 81       	ldd	r25, Y+6	; 0x06
 146:	83 30       	cpi	r24, 0x03	; 3
 148:	91 05       	cpc	r25, r1
 14a:	09 f4       	brne	.+2      	; 0x14e <DIO_enuSetPinDirection+0x74>
 14c:	7c c0       	rjmp	.+248    	; 0x246 <DIO_enuSetPinDirection+0x16c>
 14e:	a6 c0       	rjmp	.+332    	; 0x29c <DIO_enuSetPinDirection+0x1c2>
	{
	case DIO_u8PORTA:
		DDRA &= ~(DIO_u8MASK_BIT <<Copy_u8PinID);
 150:	aa e3       	ldi	r26, 0x3A	; 58
 152:	b0 e0       	ldi	r27, 0x00	; 0
 154:	ea e3       	ldi	r30, 0x3A	; 58
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	48 2f       	mov	r20, r24
 15c:	8b 81       	ldd	r24, Y+3	; 0x03
 15e:	28 2f       	mov	r18, r24
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	02 c0       	rjmp	.+4      	; 0x16c <DIO_enuSetPinDirection+0x92>
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	2a 95       	dec	r18
 16e:	e2 f7       	brpl	.-8      	; 0x168 <DIO_enuSetPinDirection+0x8e>
 170:	80 95       	com	r24
 172:	84 23       	and	r24, r20
 174:	8c 93       	st	X, r24
		DDRA |=  (Copy_u8PortDirection <<Copy_u8PinID);
 176:	aa e3       	ldi	r26, 0x3A	; 58
 178:	b0 e0       	ldi	r27, 0x00	; 0
 17a:	ea e3       	ldi	r30, 0x3A	; 58
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	48 2f       	mov	r20, r24
 182:	8c 81       	ldd	r24, Y+4	; 0x04
 184:	28 2f       	mov	r18, r24
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	8b 81       	ldd	r24, Y+3	; 0x03
 18a:	88 2f       	mov	r24, r24
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	b9 01       	movw	r22, r18
 190:	02 c0       	rjmp	.+4      	; 0x196 <DIO_enuSetPinDirection+0xbc>
 192:	66 0f       	add	r22, r22
 194:	77 1f       	adc	r23, r23
 196:	8a 95       	dec	r24
 198:	e2 f7       	brpl	.-8      	; 0x192 <DIO_enuSetPinDirection+0xb8>
 19a:	cb 01       	movw	r24, r22
 19c:	84 2b       	or	r24, r20
 19e:	8c 93       	st	X, r24
 1a0:	7d c0       	rjmp	.+250    	; 0x29c <DIO_enuSetPinDirection+0x1c2>

		break;
	case DIO_u8PORTB:
		DDRB &= ~(DIO_u8MASK_BIT <<Copy_u8PinID);
 1a2:	a7 e3       	ldi	r26, 0x37	; 55
 1a4:	b0 e0       	ldi	r27, 0x00	; 0
 1a6:	e7 e3       	ldi	r30, 0x37	; 55
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	80 81       	ld	r24, Z
 1ac:	48 2f       	mov	r20, r24
 1ae:	8b 81       	ldd	r24, Y+3	; 0x03
 1b0:	28 2f       	mov	r18, r24
 1b2:	30 e0       	ldi	r19, 0x00	; 0
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <DIO_enuSetPinDirection+0xe4>
 1ba:	88 0f       	add	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	2a 95       	dec	r18
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <DIO_enuSetPinDirection+0xe0>
 1c2:	80 95       	com	r24
 1c4:	84 23       	and	r24, r20
 1c6:	8c 93       	st	X, r24
		DDRB |=  (Copy_u8PortDirection <<Copy_u8PinID);
 1c8:	a7 e3       	ldi	r26, 0x37	; 55
 1ca:	b0 e0       	ldi	r27, 0x00	; 0
 1cc:	e7 e3       	ldi	r30, 0x37	; 55
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	80 81       	ld	r24, Z
 1d2:	48 2f       	mov	r20, r24
 1d4:	8c 81       	ldd	r24, Y+4	; 0x04
 1d6:	28 2f       	mov	r18, r24
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	8b 81       	ldd	r24, Y+3	; 0x03
 1dc:	88 2f       	mov	r24, r24
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	b9 01       	movw	r22, r18
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <DIO_enuSetPinDirection+0x10e>
 1e4:	66 0f       	add	r22, r22
 1e6:	77 1f       	adc	r23, r23
 1e8:	8a 95       	dec	r24
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <DIO_enuSetPinDirection+0x10a>
 1ec:	cb 01       	movw	r24, r22
 1ee:	84 2b       	or	r24, r20
 1f0:	8c 93       	st	X, r24
 1f2:	54 c0       	rjmp	.+168    	; 0x29c <DIO_enuSetPinDirection+0x1c2>

		break;
	case DIO_u8PORTC:
		DDRC &= ~(DIO_u8MASK_BIT <<Copy_u8PinID);
 1f4:	a4 e3       	ldi	r26, 0x34	; 52
 1f6:	b0 e0       	ldi	r27, 0x00	; 0
 1f8:	e4 e3       	ldi	r30, 0x34	; 52
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	80 81       	ld	r24, Z
 1fe:	48 2f       	mov	r20, r24
 200:	8b 81       	ldd	r24, Y+3	; 0x03
 202:	28 2f       	mov	r18, r24
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	02 c0       	rjmp	.+4      	; 0x210 <DIO_enuSetPinDirection+0x136>
 20c:	88 0f       	add	r24, r24
 20e:	99 1f       	adc	r25, r25
 210:	2a 95       	dec	r18
 212:	e2 f7       	brpl	.-8      	; 0x20c <DIO_enuSetPinDirection+0x132>
 214:	80 95       	com	r24
 216:	84 23       	and	r24, r20
 218:	8c 93       	st	X, r24
		DDRC |=  (Copy_u8PortDirection <<Copy_u8PinID);
 21a:	a4 e3       	ldi	r26, 0x34	; 52
 21c:	b0 e0       	ldi	r27, 0x00	; 0
 21e:	e4 e3       	ldi	r30, 0x34	; 52
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	80 81       	ld	r24, Z
 224:	48 2f       	mov	r20, r24
 226:	8c 81       	ldd	r24, Y+4	; 0x04
 228:	28 2f       	mov	r18, r24
 22a:	30 e0       	ldi	r19, 0x00	; 0
 22c:	8b 81       	ldd	r24, Y+3	; 0x03
 22e:	88 2f       	mov	r24, r24
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	b9 01       	movw	r22, r18
 234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_enuSetPinDirection+0x160>
 236:	66 0f       	add	r22, r22
 238:	77 1f       	adc	r23, r23
 23a:	8a 95       	dec	r24
 23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_enuSetPinDirection+0x15c>
 23e:	cb 01       	movw	r24, r22
 240:	84 2b       	or	r24, r20
 242:	8c 93       	st	X, r24
 244:	2b c0       	rjmp	.+86     	; 0x29c <DIO_enuSetPinDirection+0x1c2>
		break;
	case DIO_u8PORTD:
		DDRD &= ~(DIO_u8MASK_BIT <<Copy_u8PinID);
 246:	a1 e3       	ldi	r26, 0x31	; 49
 248:	b0 e0       	ldi	r27, 0x00	; 0
 24a:	e1 e3       	ldi	r30, 0x31	; 49
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	80 81       	ld	r24, Z
 250:	48 2f       	mov	r20, r24
 252:	8b 81       	ldd	r24, Y+3	; 0x03
 254:	28 2f       	mov	r18, r24
 256:	30 e0       	ldi	r19, 0x00	; 0
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	02 c0       	rjmp	.+4      	; 0x262 <DIO_enuSetPinDirection+0x188>
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	2a 95       	dec	r18
 264:	e2 f7       	brpl	.-8      	; 0x25e <DIO_enuSetPinDirection+0x184>
 266:	80 95       	com	r24
 268:	84 23       	and	r24, r20
 26a:	8c 93       	st	X, r24
		DDRD |=  (Copy_u8PortDirection <<Copy_u8PinID);
 26c:	a1 e3       	ldi	r26, 0x31	; 49
 26e:	b0 e0       	ldi	r27, 0x00	; 0
 270:	e1 e3       	ldi	r30, 0x31	; 49
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	80 81       	ld	r24, Z
 276:	48 2f       	mov	r20, r24
 278:	8c 81       	ldd	r24, Y+4	; 0x04
 27a:	28 2f       	mov	r18, r24
 27c:	30 e0       	ldi	r19, 0x00	; 0
 27e:	8b 81       	ldd	r24, Y+3	; 0x03
 280:	88 2f       	mov	r24, r24
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	b9 01       	movw	r22, r18
 286:	02 c0       	rjmp	.+4      	; 0x28c <DIO_enuSetPinDirection+0x1b2>
 288:	66 0f       	add	r22, r22
 28a:	77 1f       	adc	r23, r23
 28c:	8a 95       	dec	r24
 28e:	e2 f7       	brpl	.-8      	; 0x288 <DIO_enuSetPinDirection+0x1ae>
 290:	cb 01       	movw	r24, r22
 292:	84 2b       	or	r24, r20
 294:	8c 93       	st	X, r24
 296:	02 c0       	rjmp	.+4      	; 0x29c <DIO_enuSetPinDirection+0x1c2>
	}

	}
	else
	{
		 Local_enuErrorStatus = ES_OUT_OF_RANGE;
 298:	82 e0       	ldi	r24, 0x02	; 2
 29a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorStatus;
 29c:	89 81       	ldd	r24, Y+1	; 0x01
	}
 29e:	26 96       	adiw	r28, 0x06	; 6
 2a0:	0f b6       	in	r0, 0x3f	; 63
 2a2:	f8 94       	cli
 2a4:	de bf       	out	0x3e, r29	; 62
 2a6:	0f be       	out	0x3f, r0	; 63
 2a8:	cd bf       	out	0x3d, r28	; 61
 2aa:	cf 91       	pop	r28
 2ac:	df 91       	pop	r29
 2ae:	08 95       	ret

000002b0 <DIO_enuTogPinValue>:

ES_T DIO_enuTogPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID)
{
 2b0:	df 93       	push	r29
 2b2:	cf 93       	push	r28
 2b4:	00 d0       	rcall	.+0      	; 0x2b6 <DIO_enuTogPinValue+0x6>
 2b6:	00 d0       	rcall	.+0      	; 0x2b8 <DIO_enuTogPinValue+0x8>
 2b8:	0f 92       	push	r0
 2ba:	cd b7       	in	r28, 0x3d	; 61
 2bc:	de b7       	in	r29, 0x3e	; 62
 2be:	8a 83       	std	Y+2, r24	; 0x02
 2c0:	6b 83       	std	Y+3, r22	; 0x03
	ES_T Local_enuErrorStatus = ES_NOK;
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID <= DIO_u8PORTD
 2c6:	8a 81       	ldd	r24, Y+2	; 0x02
 2c8:	84 30       	cpi	r24, 0x04	; 4
 2ca:	08 f0       	brcs	.+2      	; 0x2ce <DIO_enuTogPinValue+0x1e>
 2cc:	73 c0       	rjmp	.+230    	; 0x3b4 <DIO_enuTogPinValue+0x104>
 2ce:	8b 81       	ldd	r24, Y+3	; 0x03
 2d0:	88 30       	cpi	r24, 0x08	; 8
 2d2:	08 f0       	brcs	.+2      	; 0x2d6 <DIO_enuTogPinValue+0x26>
 2d4:	6f c0       	rjmp	.+222    	; 0x3b4 <DIO_enuTogPinValue+0x104>
				&& Copy_u8PinID <= DIO_u8PIN7)
			{
			switch(Copy_u8PortID)
 2d6:	8a 81       	ldd	r24, Y+2	; 0x02
 2d8:	28 2f       	mov	r18, r24
 2da:	30 e0       	ldi	r19, 0x00	; 0
 2dc:	3d 83       	std	Y+5, r19	; 0x05
 2de:	2c 83       	std	Y+4, r18	; 0x04
 2e0:	8c 81       	ldd	r24, Y+4	; 0x04
 2e2:	9d 81       	ldd	r25, Y+5	; 0x05
 2e4:	81 30       	cpi	r24, 0x01	; 1
 2e6:	91 05       	cpc	r25, r1
 2e8:	49 f1       	breq	.+82     	; 0x33c <DIO_enuTogPinValue+0x8c>
 2ea:	2c 81       	ldd	r18, Y+4	; 0x04
 2ec:	3d 81       	ldd	r19, Y+5	; 0x05
 2ee:	22 30       	cpi	r18, 0x02	; 2
 2f0:	31 05       	cpc	r19, r1
 2f2:	2c f4       	brge	.+10     	; 0x2fe <DIO_enuTogPinValue+0x4e>
 2f4:	8c 81       	ldd	r24, Y+4	; 0x04
 2f6:	9d 81       	ldd	r25, Y+5	; 0x05
 2f8:	00 97       	sbiw	r24, 0x00	; 0
 2fa:	61 f0       	breq	.+24     	; 0x314 <DIO_enuTogPinValue+0x64>
 2fc:	5d c0       	rjmp	.+186    	; 0x3b8 <DIO_enuTogPinValue+0x108>
 2fe:	2c 81       	ldd	r18, Y+4	; 0x04
 300:	3d 81       	ldd	r19, Y+5	; 0x05
 302:	22 30       	cpi	r18, 0x02	; 2
 304:	31 05       	cpc	r19, r1
 306:	71 f1       	breq	.+92     	; 0x364 <DIO_enuTogPinValue+0xb4>
 308:	8c 81       	ldd	r24, Y+4	; 0x04
 30a:	9d 81       	ldd	r25, Y+5	; 0x05
 30c:	83 30       	cpi	r24, 0x03	; 3
 30e:	91 05       	cpc	r25, r1
 310:	e9 f1       	breq	.+122    	; 0x38c <DIO_enuTogPinValue+0xdc>
 312:	52 c0       	rjmp	.+164    	; 0x3b8 <DIO_enuTogPinValue+0x108>
			{
			case DIO_u8PORTA:
				PORTA ^= (DIO_u8MASK_BIT <<Copy_u8PinID);
 314:	ab e3       	ldi	r26, 0x3B	; 59
 316:	b0 e0       	ldi	r27, 0x00	; 0
 318:	eb e3       	ldi	r30, 0x3B	; 59
 31a:	f0 e0       	ldi	r31, 0x00	; 0
 31c:	80 81       	ld	r24, Z
 31e:	48 2f       	mov	r20, r24
 320:	8b 81       	ldd	r24, Y+3	; 0x03
 322:	28 2f       	mov	r18, r24
 324:	30 e0       	ldi	r19, 0x00	; 0
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	02 2e       	mov	r0, r18
 32c:	02 c0       	rjmp	.+4      	; 0x332 <DIO_enuTogPinValue+0x82>
 32e:	88 0f       	add	r24, r24
 330:	99 1f       	adc	r25, r25
 332:	0a 94       	dec	r0
 334:	e2 f7       	brpl	.-8      	; 0x32e <DIO_enuTogPinValue+0x7e>
 336:	84 27       	eor	r24, r20
 338:	8c 93       	st	X, r24
 33a:	3e c0       	rjmp	.+124    	; 0x3b8 <DIO_enuTogPinValue+0x108>


				break;
			case DIO_u8PORTB:
				PORTB ^= (DIO_u8MASK_BIT <<Copy_u8PinID);
 33c:	a8 e3       	ldi	r26, 0x38	; 56
 33e:	b0 e0       	ldi	r27, 0x00	; 0
 340:	e8 e3       	ldi	r30, 0x38	; 56
 342:	f0 e0       	ldi	r31, 0x00	; 0
 344:	80 81       	ld	r24, Z
 346:	48 2f       	mov	r20, r24
 348:	8b 81       	ldd	r24, Y+3	; 0x03
 34a:	28 2f       	mov	r18, r24
 34c:	30 e0       	ldi	r19, 0x00	; 0
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	02 2e       	mov	r0, r18
 354:	02 c0       	rjmp	.+4      	; 0x35a <DIO_enuTogPinValue+0xaa>
 356:	88 0f       	add	r24, r24
 358:	99 1f       	adc	r25, r25
 35a:	0a 94       	dec	r0
 35c:	e2 f7       	brpl	.-8      	; 0x356 <DIO_enuTogPinValue+0xa6>
 35e:	84 27       	eor	r24, r20
 360:	8c 93       	st	X, r24
 362:	2a c0       	rjmp	.+84     	; 0x3b8 <DIO_enuTogPinValue+0x108>


				break;
			case DIO_u8PORTC:
				PORTC ^= (DIO_u8MASK_BIT <<Copy_u8PinID);
 364:	a5 e3       	ldi	r26, 0x35	; 53
 366:	b0 e0       	ldi	r27, 0x00	; 0
 368:	e5 e3       	ldi	r30, 0x35	; 53
 36a:	f0 e0       	ldi	r31, 0x00	; 0
 36c:	80 81       	ld	r24, Z
 36e:	48 2f       	mov	r20, r24
 370:	8b 81       	ldd	r24, Y+3	; 0x03
 372:	28 2f       	mov	r18, r24
 374:	30 e0       	ldi	r19, 0x00	; 0
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	02 2e       	mov	r0, r18
 37c:	02 c0       	rjmp	.+4      	; 0x382 <DIO_enuTogPinValue+0xd2>
 37e:	88 0f       	add	r24, r24
 380:	99 1f       	adc	r25, r25
 382:	0a 94       	dec	r0
 384:	e2 f7       	brpl	.-8      	; 0x37e <DIO_enuTogPinValue+0xce>
 386:	84 27       	eor	r24, r20
 388:	8c 93       	st	X, r24
 38a:	16 c0       	rjmp	.+44     	; 0x3b8 <DIO_enuTogPinValue+0x108>

				break;
			case DIO_u8PORTD:
				PORTD ^= (DIO_u8MASK_BIT <<Copy_u8PinID);
 38c:	a2 e3       	ldi	r26, 0x32	; 50
 38e:	b0 e0       	ldi	r27, 0x00	; 0
 390:	e2 e3       	ldi	r30, 0x32	; 50
 392:	f0 e0       	ldi	r31, 0x00	; 0
 394:	80 81       	ld	r24, Z
 396:	48 2f       	mov	r20, r24
 398:	8b 81       	ldd	r24, Y+3	; 0x03
 39a:	28 2f       	mov	r18, r24
 39c:	30 e0       	ldi	r19, 0x00	; 0
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	02 2e       	mov	r0, r18
 3a4:	02 c0       	rjmp	.+4      	; 0x3aa <DIO_enuTogPinValue+0xfa>
 3a6:	88 0f       	add	r24, r24
 3a8:	99 1f       	adc	r25, r25
 3aa:	0a 94       	dec	r0
 3ac:	e2 f7       	brpl	.-8      	; 0x3a6 <DIO_enuTogPinValue+0xf6>
 3ae:	84 27       	eor	r24, r20
 3b0:	8c 93       	st	X, r24
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <DIO_enuTogPinValue+0x108>
				break;
			}
		}
			else
			{
				 Local_enuErrorStatus = ES_OUT_OF_RANGE;
 3b4:	82 e0       	ldi	r24, 0x02	; 2
 3b6:	89 83       	std	Y+1, r24	; 0x01

			}

	return Local_enuErrorStatus;
 3b8:	89 81       	ldd	r24, Y+1	; 0x01

}
 3ba:	0f 90       	pop	r0
 3bc:	0f 90       	pop	r0
 3be:	0f 90       	pop	r0
 3c0:	0f 90       	pop	r0
 3c2:	0f 90       	pop	r0
 3c4:	cf 91       	pop	r28
 3c6:	df 91       	pop	r29
 3c8:	08 95       	ret

000003ca <DIO_enuSetPinValue>:

ES_T DIO_enuSetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 Copy_u8PinValue)
{
 3ca:	df 93       	push	r29
 3cc:	cf 93       	push	r28
 3ce:	00 d0       	rcall	.+0      	; 0x3d0 <DIO_enuSetPinValue+0x6>
 3d0:	00 d0       	rcall	.+0      	; 0x3d2 <DIO_enuSetPinValue+0x8>
 3d2:	00 d0       	rcall	.+0      	; 0x3d4 <DIO_enuSetPinValue+0xa>
 3d4:	cd b7       	in	r28, 0x3d	; 61
 3d6:	de b7       	in	r29, 0x3e	; 62
 3d8:	8a 83       	std	Y+2, r24	; 0x02
 3da:	6b 83       	std	Y+3, r22	; 0x03
 3dc:	4c 83       	std	Y+4, r20	; 0x04
	ES_T Local_enuErrorStatus = ES_NOK;
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID <= DIO_u8PORTD
 3e2:	8a 81       	ldd	r24, Y+2	; 0x02
 3e4:	84 30       	cpi	r24, 0x04	; 4
 3e6:	08 f0       	brcs	.+2      	; 0x3ea <DIO_enuSetPinValue+0x20>
 3e8:	d2 c0       	rjmp	.+420    	; 0x58e <DIO_enuSetPinValue+0x1c4>
 3ea:	8b 81       	ldd	r24, Y+3	; 0x03
 3ec:	88 30       	cpi	r24, 0x08	; 8
 3ee:	08 f0       	brcs	.+2      	; 0x3f2 <DIO_enuSetPinValue+0x28>
 3f0:	ce c0       	rjmp	.+412    	; 0x58e <DIO_enuSetPinValue+0x1c4>
 3f2:	8c 81       	ldd	r24, Y+4	; 0x04
 3f4:	82 30       	cpi	r24, 0x02	; 2
 3f6:	20 f0       	brcs	.+8      	; 0x400 <DIO_enuSetPinValue+0x36>
 3f8:	8c 81       	ldd	r24, Y+4	; 0x04
 3fa:	88 23       	and	r24, r24
 3fc:	09 f0       	breq	.+2      	; 0x400 <DIO_enuSetPinValue+0x36>
 3fe:	c7 c0       	rjmp	.+398    	; 0x58e <DIO_enuSetPinValue+0x1c4>
			&& Copy_u8PinID <= DIO_u8PIN7
			&& (Copy_u8PinValue <= DIO_u8HIGH ||Copy_u8PinValue <= DIO_u8PULL_UP ))
		{
		switch(Copy_u8PortID)
 400:	8a 81       	ldd	r24, Y+2	; 0x02
 402:	28 2f       	mov	r18, r24
 404:	30 e0       	ldi	r19, 0x00	; 0
 406:	3e 83       	std	Y+6, r19	; 0x06
 408:	2d 83       	std	Y+5, r18	; 0x05
 40a:	6d 81       	ldd	r22, Y+5	; 0x05
 40c:	7e 81       	ldd	r23, Y+6	; 0x06
 40e:	61 30       	cpi	r22, 0x01	; 1
 410:	71 05       	cpc	r23, r1
 412:	09 f4       	brne	.+2      	; 0x416 <DIO_enuSetPinValue+0x4c>
 414:	41 c0       	rjmp	.+130    	; 0x498 <DIO_enuSetPinValue+0xce>
 416:	8d 81       	ldd	r24, Y+5	; 0x05
 418:	9e 81       	ldd	r25, Y+6	; 0x06
 41a:	82 30       	cpi	r24, 0x02	; 2
 41c:	91 05       	cpc	r25, r1
 41e:	34 f4       	brge	.+12     	; 0x42c <DIO_enuSetPinValue+0x62>
 420:	2d 81       	ldd	r18, Y+5	; 0x05
 422:	3e 81       	ldd	r19, Y+6	; 0x06
 424:	21 15       	cp	r18, r1
 426:	31 05       	cpc	r19, r1
 428:	71 f0       	breq	.+28     	; 0x446 <DIO_enuSetPinValue+0x7c>
 42a:	b3 c0       	rjmp	.+358    	; 0x592 <DIO_enuSetPinValue+0x1c8>
 42c:	6d 81       	ldd	r22, Y+5	; 0x05
 42e:	7e 81       	ldd	r23, Y+6	; 0x06
 430:	62 30       	cpi	r22, 0x02	; 2
 432:	71 05       	cpc	r23, r1
 434:	09 f4       	brne	.+2      	; 0x438 <DIO_enuSetPinValue+0x6e>
 436:	59 c0       	rjmp	.+178    	; 0x4ea <DIO_enuSetPinValue+0x120>
 438:	8d 81       	ldd	r24, Y+5	; 0x05
 43a:	9e 81       	ldd	r25, Y+6	; 0x06
 43c:	83 30       	cpi	r24, 0x03	; 3
 43e:	91 05       	cpc	r25, r1
 440:	09 f4       	brne	.+2      	; 0x444 <DIO_enuSetPinValue+0x7a>
 442:	7c c0       	rjmp	.+248    	; 0x53c <DIO_enuSetPinValue+0x172>
 444:	a6 c0       	rjmp	.+332    	; 0x592 <DIO_enuSetPinValue+0x1c8>
		{
		case DIO_u8PORTA:

			PORTA &= ~(DIO_u8MASK_BIT <<Copy_u8PinID);
 446:	ab e3       	ldi	r26, 0x3B	; 59
 448:	b0 e0       	ldi	r27, 0x00	; 0
 44a:	eb e3       	ldi	r30, 0x3B	; 59
 44c:	f0 e0       	ldi	r31, 0x00	; 0
 44e:	80 81       	ld	r24, Z
 450:	48 2f       	mov	r20, r24
 452:	8b 81       	ldd	r24, Y+3	; 0x03
 454:	28 2f       	mov	r18, r24
 456:	30 e0       	ldi	r19, 0x00	; 0
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	02 c0       	rjmp	.+4      	; 0x462 <DIO_enuSetPinValue+0x98>
 45e:	88 0f       	add	r24, r24
 460:	99 1f       	adc	r25, r25
 462:	2a 95       	dec	r18
 464:	e2 f7       	brpl	.-8      	; 0x45e <DIO_enuSetPinValue+0x94>
 466:	80 95       	com	r24
 468:	84 23       	and	r24, r20
 46a:	8c 93       	st	X, r24

			PORTA |=  (Copy_u8PinValue <<Copy_u8PinID);
 46c:	ab e3       	ldi	r26, 0x3B	; 59
 46e:	b0 e0       	ldi	r27, 0x00	; 0
 470:	eb e3       	ldi	r30, 0x3B	; 59
 472:	f0 e0       	ldi	r31, 0x00	; 0
 474:	80 81       	ld	r24, Z
 476:	48 2f       	mov	r20, r24
 478:	8c 81       	ldd	r24, Y+4	; 0x04
 47a:	28 2f       	mov	r18, r24
 47c:	30 e0       	ldi	r19, 0x00	; 0
 47e:	8b 81       	ldd	r24, Y+3	; 0x03
 480:	88 2f       	mov	r24, r24
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	b9 01       	movw	r22, r18
 486:	02 c0       	rjmp	.+4      	; 0x48c <DIO_enuSetPinValue+0xc2>
 488:	66 0f       	add	r22, r22
 48a:	77 1f       	adc	r23, r23
 48c:	8a 95       	dec	r24
 48e:	e2 f7       	brpl	.-8      	; 0x488 <DIO_enuSetPinValue+0xbe>
 490:	cb 01       	movw	r24, r22
 492:	84 2b       	or	r24, r20
 494:	8c 93       	st	X, r24
 496:	7d c0       	rjmp	.+250    	; 0x592 <DIO_enuSetPinValue+0x1c8>

			break;
		case DIO_u8PORTB:
			PORTB &= ~(DIO_u8MASK_BIT <<Copy_u8PinID);
 498:	a8 e3       	ldi	r26, 0x38	; 56
 49a:	b0 e0       	ldi	r27, 0x00	; 0
 49c:	e8 e3       	ldi	r30, 0x38	; 56
 49e:	f0 e0       	ldi	r31, 0x00	; 0
 4a0:	80 81       	ld	r24, Z
 4a2:	48 2f       	mov	r20, r24
 4a4:	8b 81       	ldd	r24, Y+3	; 0x03
 4a6:	28 2f       	mov	r18, r24
 4a8:	30 e0       	ldi	r19, 0x00	; 0
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <DIO_enuSetPinValue+0xea>
 4b0:	88 0f       	add	r24, r24
 4b2:	99 1f       	adc	r25, r25
 4b4:	2a 95       	dec	r18
 4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <DIO_enuSetPinValue+0xe6>
 4b8:	80 95       	com	r24
 4ba:	84 23       	and	r24, r20
 4bc:	8c 93       	st	X, r24

			PORTB |=  (Copy_u8PinValue <<Copy_u8PinID);
 4be:	a8 e3       	ldi	r26, 0x38	; 56
 4c0:	b0 e0       	ldi	r27, 0x00	; 0
 4c2:	e8 e3       	ldi	r30, 0x38	; 56
 4c4:	f0 e0       	ldi	r31, 0x00	; 0
 4c6:	80 81       	ld	r24, Z
 4c8:	48 2f       	mov	r20, r24
 4ca:	8c 81       	ldd	r24, Y+4	; 0x04
 4cc:	28 2f       	mov	r18, r24
 4ce:	30 e0       	ldi	r19, 0x00	; 0
 4d0:	8b 81       	ldd	r24, Y+3	; 0x03
 4d2:	88 2f       	mov	r24, r24
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	b9 01       	movw	r22, r18
 4d8:	02 c0       	rjmp	.+4      	; 0x4de <DIO_enuSetPinValue+0x114>
 4da:	66 0f       	add	r22, r22
 4dc:	77 1f       	adc	r23, r23
 4de:	8a 95       	dec	r24
 4e0:	e2 f7       	brpl	.-8      	; 0x4da <DIO_enuSetPinValue+0x110>
 4e2:	cb 01       	movw	r24, r22
 4e4:	84 2b       	or	r24, r20
 4e6:	8c 93       	st	X, r24
 4e8:	54 c0       	rjmp	.+168    	; 0x592 <DIO_enuSetPinValue+0x1c8>

			break;
		case DIO_u8PORTC:
			PORTC &= ~(DIO_u8MASK_BIT <<Copy_u8PinID);
 4ea:	a5 e3       	ldi	r26, 0x35	; 53
 4ec:	b0 e0       	ldi	r27, 0x00	; 0
 4ee:	e5 e3       	ldi	r30, 0x35	; 53
 4f0:	f0 e0       	ldi	r31, 0x00	; 0
 4f2:	80 81       	ld	r24, Z
 4f4:	48 2f       	mov	r20, r24
 4f6:	8b 81       	ldd	r24, Y+3	; 0x03
 4f8:	28 2f       	mov	r18, r24
 4fa:	30 e0       	ldi	r19, 0x00	; 0
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	02 c0       	rjmp	.+4      	; 0x506 <DIO_enuSetPinValue+0x13c>
 502:	88 0f       	add	r24, r24
 504:	99 1f       	adc	r25, r25
 506:	2a 95       	dec	r18
 508:	e2 f7       	brpl	.-8      	; 0x502 <DIO_enuSetPinValue+0x138>
 50a:	80 95       	com	r24
 50c:	84 23       	and	r24, r20
 50e:	8c 93       	st	X, r24

			PORTC |=  (Copy_u8PinValue <<Copy_u8PinID);
 510:	a5 e3       	ldi	r26, 0x35	; 53
 512:	b0 e0       	ldi	r27, 0x00	; 0
 514:	e5 e3       	ldi	r30, 0x35	; 53
 516:	f0 e0       	ldi	r31, 0x00	; 0
 518:	80 81       	ld	r24, Z
 51a:	48 2f       	mov	r20, r24
 51c:	8c 81       	ldd	r24, Y+4	; 0x04
 51e:	28 2f       	mov	r18, r24
 520:	30 e0       	ldi	r19, 0x00	; 0
 522:	8b 81       	ldd	r24, Y+3	; 0x03
 524:	88 2f       	mov	r24, r24
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	b9 01       	movw	r22, r18
 52a:	02 c0       	rjmp	.+4      	; 0x530 <DIO_enuSetPinValue+0x166>
 52c:	66 0f       	add	r22, r22
 52e:	77 1f       	adc	r23, r23
 530:	8a 95       	dec	r24
 532:	e2 f7       	brpl	.-8      	; 0x52c <DIO_enuSetPinValue+0x162>
 534:	cb 01       	movw	r24, r22
 536:	84 2b       	or	r24, r20
 538:	8c 93       	st	X, r24
 53a:	2b c0       	rjmp	.+86     	; 0x592 <DIO_enuSetPinValue+0x1c8>
			break;
		case DIO_u8PORTD:
			PORTD &= ~(DIO_u8MASK_BIT <<Copy_u8PinID);
 53c:	a2 e3       	ldi	r26, 0x32	; 50
 53e:	b0 e0       	ldi	r27, 0x00	; 0
 540:	e2 e3       	ldi	r30, 0x32	; 50
 542:	f0 e0       	ldi	r31, 0x00	; 0
 544:	80 81       	ld	r24, Z
 546:	48 2f       	mov	r20, r24
 548:	8b 81       	ldd	r24, Y+3	; 0x03
 54a:	28 2f       	mov	r18, r24
 54c:	30 e0       	ldi	r19, 0x00	; 0
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	02 c0       	rjmp	.+4      	; 0x558 <DIO_enuSetPinValue+0x18e>
 554:	88 0f       	add	r24, r24
 556:	99 1f       	adc	r25, r25
 558:	2a 95       	dec	r18
 55a:	e2 f7       	brpl	.-8      	; 0x554 <DIO_enuSetPinValue+0x18a>
 55c:	80 95       	com	r24
 55e:	84 23       	and	r24, r20
 560:	8c 93       	st	X, r24

			PORTD |=  (Copy_u8PinValue <<Copy_u8PinID);
 562:	a2 e3       	ldi	r26, 0x32	; 50
 564:	b0 e0       	ldi	r27, 0x00	; 0
 566:	e2 e3       	ldi	r30, 0x32	; 50
 568:	f0 e0       	ldi	r31, 0x00	; 0
 56a:	80 81       	ld	r24, Z
 56c:	48 2f       	mov	r20, r24
 56e:	8c 81       	ldd	r24, Y+4	; 0x04
 570:	28 2f       	mov	r18, r24
 572:	30 e0       	ldi	r19, 0x00	; 0
 574:	8b 81       	ldd	r24, Y+3	; 0x03
 576:	88 2f       	mov	r24, r24
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	b9 01       	movw	r22, r18
 57c:	02 c0       	rjmp	.+4      	; 0x582 <DIO_enuSetPinValue+0x1b8>
 57e:	66 0f       	add	r22, r22
 580:	77 1f       	adc	r23, r23
 582:	8a 95       	dec	r24
 584:	e2 f7       	brpl	.-8      	; 0x57e <DIO_enuSetPinValue+0x1b4>
 586:	cb 01       	movw	r24, r22
 588:	84 2b       	or	r24, r20
 58a:	8c 93       	st	X, r24
 58c:	02 c0       	rjmp	.+4      	; 0x592 <DIO_enuSetPinValue+0x1c8>
			break;
		}
		}
		else
		{
			 Local_enuErrorStatus = ES_OUT_OF_RANGE;
 58e:	82 e0       	ldi	r24, 0x02	; 2
 590:	89 83       	std	Y+1, r24	; 0x01

		}

	return Local_enuErrorStatus;
 592:	89 81       	ldd	r24, Y+1	; 0x01

}
 594:	26 96       	adiw	r28, 0x06	; 6
 596:	0f b6       	in	r0, 0x3f	; 63
 598:	f8 94       	cli
 59a:	de bf       	out	0x3e, r29	; 62
 59c:	0f be       	out	0x3f, r0	; 63
 59e:	cd bf       	out	0x3d, r28	; 61
 5a0:	cf 91       	pop	r28
 5a2:	df 91       	pop	r29
 5a4:	08 95       	ret

000005a6 <DIO_enuGetPinValue>:

ES_T DIO_enuGetPinValue (u8 Copy_u8PortID , u8 Copy_u8PinID , u8 * Copy_pu8PinValue)
{
 5a6:	df 93       	push	r29
 5a8:	cf 93       	push	r28
 5aa:	cd b7       	in	r28, 0x3d	; 61
 5ac:	de b7       	in	r29, 0x3e	; 62
 5ae:	27 97       	sbiw	r28, 0x07	; 7
 5b0:	0f b6       	in	r0, 0x3f	; 63
 5b2:	f8 94       	cli
 5b4:	de bf       	out	0x3e, r29	; 62
 5b6:	0f be       	out	0x3f, r0	; 63
 5b8:	cd bf       	out	0x3d, r28	; 61
 5ba:	8a 83       	std	Y+2, r24	; 0x02
 5bc:	6b 83       	std	Y+3, r22	; 0x03
 5be:	5d 83       	std	Y+5, r21	; 0x05
 5c0:	4c 83       	std	Y+4, r20	; 0x04
	ES_T Local_enuErrorStatus = ES_NOK;
 5c2:	81 e0       	ldi	r24, 0x01	; 1
 5c4:	89 83       	std	Y+1, r24	; 0x01
	if( Copy_pu8PinValue != NULL)
 5c6:	8c 81       	ldd	r24, Y+4	; 0x04
 5c8:	9d 81       	ldd	r25, Y+5	; 0x05
 5ca:	00 97       	sbiw	r24, 0x00	; 0
 5cc:	09 f4       	brne	.+2      	; 0x5d0 <DIO_enuGetPinValue+0x2a>
 5ce:	86 c0       	rjmp	.+268    	; 0x6dc <DIO_enuGetPinValue+0x136>
	{
		 if (Copy_u8PortID <= DIO_u8PORTD
 5d0:	8a 81       	ldd	r24, Y+2	; 0x02
 5d2:	84 30       	cpi	r24, 0x04	; 4
 5d4:	08 f0       	brcs	.+2      	; 0x5d8 <DIO_enuGetPinValue+0x32>
 5d6:	84 c0       	rjmp	.+264    	; 0x6e0 <DIO_enuGetPinValue+0x13a>
 5d8:	8b 81       	ldd	r24, Y+3	; 0x03
 5da:	88 30       	cpi	r24, 0x08	; 8
 5dc:	08 f0       	brcs	.+2      	; 0x5e0 <DIO_enuGetPinValue+0x3a>
 5de:	80 c0       	rjmp	.+256    	; 0x6e0 <DIO_enuGetPinValue+0x13a>
 5e0:	ec 81       	ldd	r30, Y+4	; 0x04
 5e2:	fd 81       	ldd	r31, Y+5	; 0x05
 5e4:	80 81       	ld	r24, Z
 5e6:	82 30       	cpi	r24, 0x02	; 2
 5e8:	30 f0       	brcs	.+12     	; 0x5f6 <DIO_enuGetPinValue+0x50>
 5ea:	ec 81       	ldd	r30, Y+4	; 0x04
 5ec:	fd 81       	ldd	r31, Y+5	; 0x05
 5ee:	80 81       	ld	r24, Z
 5f0:	88 23       	and	r24, r24
 5f2:	09 f0       	breq	.+2      	; 0x5f6 <DIO_enuGetPinValue+0x50>
 5f4:	75 c0       	rjmp	.+234    	; 0x6e0 <DIO_enuGetPinValue+0x13a>
					&& Copy_u8PinID <= DIO_u8PIN7
					&& (* Copy_pu8PinValue <= DIO_u8HIGH || * Copy_pu8PinValue <= DIO_u8PULL_UP ))
					{
				switch(Copy_u8PortID)
 5f6:	8a 81       	ldd	r24, Y+2	; 0x02
 5f8:	28 2f       	mov	r18, r24
 5fa:	30 e0       	ldi	r19, 0x00	; 0
 5fc:	3f 83       	std	Y+7, r19	; 0x07
 5fe:	2e 83       	std	Y+6, r18	; 0x06
 600:	4e 81       	ldd	r20, Y+6	; 0x06
 602:	5f 81       	ldd	r21, Y+7	; 0x07
 604:	41 30       	cpi	r20, 0x01	; 1
 606:	51 05       	cpc	r21, r1
 608:	59 f1       	breq	.+86     	; 0x660 <DIO_enuGetPinValue+0xba>
 60a:	8e 81       	ldd	r24, Y+6	; 0x06
 60c:	9f 81       	ldd	r25, Y+7	; 0x07
 60e:	82 30       	cpi	r24, 0x02	; 2
 610:	91 05       	cpc	r25, r1
 612:	34 f4       	brge	.+12     	; 0x620 <DIO_enuGetPinValue+0x7a>
 614:	2e 81       	ldd	r18, Y+6	; 0x06
 616:	3f 81       	ldd	r19, Y+7	; 0x07
 618:	21 15       	cp	r18, r1
 61a:	31 05       	cpc	r19, r1
 61c:	69 f0       	breq	.+26     	; 0x638 <DIO_enuGetPinValue+0x92>
 61e:	5b c0       	rjmp	.+182    	; 0x6d6 <DIO_enuGetPinValue+0x130>
 620:	4e 81       	ldd	r20, Y+6	; 0x06
 622:	5f 81       	ldd	r21, Y+7	; 0x07
 624:	42 30       	cpi	r20, 0x02	; 2
 626:	51 05       	cpc	r21, r1
 628:	79 f1       	breq	.+94     	; 0x688 <DIO_enuGetPinValue+0xe2>
 62a:	8e 81       	ldd	r24, Y+6	; 0x06
 62c:	9f 81       	ldd	r25, Y+7	; 0x07
 62e:	83 30       	cpi	r24, 0x03	; 3
 630:	91 05       	cpc	r25, r1
 632:	09 f4       	brne	.+2      	; 0x636 <DIO_enuGetPinValue+0x90>
 634:	3d c0       	rjmp	.+122    	; 0x6b0 <DIO_enuGetPinValue+0x10a>
 636:	4f c0       	rjmp	.+158    	; 0x6d6 <DIO_enuGetPinValue+0x130>
				{
				case DIO_u8PORTA:
					* Copy_pu8PinValue = ( (PINA >>Copy_u8PinID)&DIO_u8MASK_BIT);
 638:	e9 e3       	ldi	r30, 0x39	; 57
 63a:	f0 e0       	ldi	r31, 0x00	; 0
 63c:	80 81       	ld	r24, Z
 63e:	28 2f       	mov	r18, r24
 640:	30 e0       	ldi	r19, 0x00	; 0
 642:	8b 81       	ldd	r24, Y+3	; 0x03
 644:	88 2f       	mov	r24, r24
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	a9 01       	movw	r20, r18
 64a:	02 c0       	rjmp	.+4      	; 0x650 <DIO_enuGetPinValue+0xaa>
 64c:	55 95       	asr	r21
 64e:	47 95       	ror	r20
 650:	8a 95       	dec	r24
 652:	e2 f7       	brpl	.-8      	; 0x64c <DIO_enuGetPinValue+0xa6>
 654:	ca 01       	movw	r24, r20
 656:	81 70       	andi	r24, 0x01	; 1
 658:	ec 81       	ldd	r30, Y+4	; 0x04
 65a:	fd 81       	ldd	r31, Y+5	; 0x05
 65c:	80 83       	st	Z, r24
 65e:	3b c0       	rjmp	.+118    	; 0x6d6 <DIO_enuGetPinValue+0x130>

					break;
				case DIO_u8PORTB:
					* Copy_pu8PinValue = ( (PINB >>Copy_u8PinID)&DIO_u8MASK_BIT);
 660:	e6 e3       	ldi	r30, 0x36	; 54
 662:	f0 e0       	ldi	r31, 0x00	; 0
 664:	80 81       	ld	r24, Z
 666:	28 2f       	mov	r18, r24
 668:	30 e0       	ldi	r19, 0x00	; 0
 66a:	8b 81       	ldd	r24, Y+3	; 0x03
 66c:	88 2f       	mov	r24, r24
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	a9 01       	movw	r20, r18
 672:	02 c0       	rjmp	.+4      	; 0x678 <DIO_enuGetPinValue+0xd2>
 674:	55 95       	asr	r21
 676:	47 95       	ror	r20
 678:	8a 95       	dec	r24
 67a:	e2 f7       	brpl	.-8      	; 0x674 <DIO_enuGetPinValue+0xce>
 67c:	ca 01       	movw	r24, r20
 67e:	81 70       	andi	r24, 0x01	; 1
 680:	ec 81       	ldd	r30, Y+4	; 0x04
 682:	fd 81       	ldd	r31, Y+5	; 0x05
 684:	80 83       	st	Z, r24
 686:	27 c0       	rjmp	.+78     	; 0x6d6 <DIO_enuGetPinValue+0x130>

					break;
				case DIO_u8PORTC:
					* Copy_pu8PinValue = ( (PINC >>Copy_u8PinID)&DIO_u8MASK_BIT);
 688:	e3 e3       	ldi	r30, 0x33	; 51
 68a:	f0 e0       	ldi	r31, 0x00	; 0
 68c:	80 81       	ld	r24, Z
 68e:	28 2f       	mov	r18, r24
 690:	30 e0       	ldi	r19, 0x00	; 0
 692:	8b 81       	ldd	r24, Y+3	; 0x03
 694:	88 2f       	mov	r24, r24
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	a9 01       	movw	r20, r18
 69a:	02 c0       	rjmp	.+4      	; 0x6a0 <DIO_enuGetPinValue+0xfa>
 69c:	55 95       	asr	r21
 69e:	47 95       	ror	r20
 6a0:	8a 95       	dec	r24
 6a2:	e2 f7       	brpl	.-8      	; 0x69c <DIO_enuGetPinValue+0xf6>
 6a4:	ca 01       	movw	r24, r20
 6a6:	81 70       	andi	r24, 0x01	; 1
 6a8:	ec 81       	ldd	r30, Y+4	; 0x04
 6aa:	fd 81       	ldd	r31, Y+5	; 0x05
 6ac:	80 83       	st	Z, r24
 6ae:	13 c0       	rjmp	.+38     	; 0x6d6 <DIO_enuGetPinValue+0x130>
					break;
				case DIO_u8PORTD:
					* Copy_pu8PinValue = ( (PIND >>Copy_u8PinID)&DIO_u8MASK_BIT);
 6b0:	e0 e3       	ldi	r30, 0x30	; 48
 6b2:	f0 e0       	ldi	r31, 0x00	; 0
 6b4:	80 81       	ld	r24, Z
 6b6:	28 2f       	mov	r18, r24
 6b8:	30 e0       	ldi	r19, 0x00	; 0
 6ba:	8b 81       	ldd	r24, Y+3	; 0x03
 6bc:	88 2f       	mov	r24, r24
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	a9 01       	movw	r20, r18
 6c2:	02 c0       	rjmp	.+4      	; 0x6c8 <DIO_enuGetPinValue+0x122>
 6c4:	55 95       	asr	r21
 6c6:	47 95       	ror	r20
 6c8:	8a 95       	dec	r24
 6ca:	e2 f7       	brpl	.-8      	; 0x6c4 <DIO_enuGetPinValue+0x11e>
 6cc:	ca 01       	movw	r24, r20
 6ce:	81 70       	andi	r24, 0x01	; 1
 6d0:	ec 81       	ldd	r30, Y+4	; 0x04
 6d2:	fd 81       	ldd	r31, Y+5	; 0x05
 6d4:	80 83       	st	Z, r24
					break;
				}
				Local_enuErrorStatus = ES_OUT_OF_RANGE;
 6d6:	82 e0       	ldi	r24, 0x02	; 2
 6d8:	89 83       	std	Y+1, r24	; 0x01
 6da:	02 c0       	rjmp	.+4      	; 0x6e0 <DIO_enuGetPinValue+0x13a>
					}
	}

			else
			{
				 Local_enuErrorStatus = ES_POINTER_TO_VOID;
 6dc:	83 e0       	ldi	r24, 0x03	; 3
 6de:	89 83       	std	Y+1, r24	; 0x01

			}


	return Local_enuErrorStatus;
 6e0:	89 81       	ldd	r24, Y+1	; 0x01

}
 6e2:	27 96       	adiw	r28, 0x07	; 7
 6e4:	0f b6       	in	r0, 0x3f	; 63
 6e6:	f8 94       	cli
 6e8:	de bf       	out	0x3e, r29	; 62
 6ea:	0f be       	out	0x3f, r0	; 63
 6ec:	cd bf       	out	0x3d, r28	; 61
 6ee:	cf 91       	pop	r28
 6f0:	df 91       	pop	r29
 6f2:	08 95       	ret

000006f4 <Switch_enuInt>:
#include "Switch_priv.h"

extern u8 Switch_u8SwNum;

ES_T Switch_enuInt(SW_T * Copy_pAstrSwitchConfig)
{
 6f4:	df 93       	push	r29
 6f6:	cf 93       	push	r28
 6f8:	00 d0       	rcall	.+0      	; 0x6fa <Switch_enuInt+0x6>
 6fa:	00 d0       	rcall	.+0      	; 0x6fc <Switch_enuInt+0x8>
 6fc:	cd b7       	in	r28, 0x3d	; 61
 6fe:	de b7       	in	r29, 0x3e	; 62
 700:	9c 83       	std	Y+4, r25	; 0x04
 702:	8b 83       	std	Y+3, r24	; 0x03
	ES_T Local_enuErrorState = ES_NOK;
 704:	81 e0       	ldi	r24, 0x01	; 1
 706:	8a 83       	std	Y+2, r24	; 0x02
	ES_T Local_u8Iterator = 0 ;
 708:	19 82       	std	Y+1, r1	; 0x01

	for(Local_u8Iterator =0 ; Local_u8Iterator < Switch_u8SwNum ; Local_u8Iterator++)
 70a:	19 82       	std	Y+1, r1	; 0x01
 70c:	53 c0       	rjmp	.+166    	; 0x7b4 <Switch_enuInt+0xc0>
	{
		 DIO_enuSetPinDirection ((Copy_pAstrSwitchConfig+Local_u8Iterator)->SW_Port  , (Copy_pAstrSwitchConfig+Local_u8Iterator)->SW_Pin , DIO_u8INPUT);  //output,input
 70e:	89 81       	ldd	r24, Y+1	; 0x01
 710:	28 2f       	mov	r18, r24
 712:	30 e0       	ldi	r19, 0x00	; 0
 714:	c9 01       	movw	r24, r18
 716:	88 0f       	add	r24, r24
 718:	99 1f       	adc	r25, r25
 71a:	28 0f       	add	r18, r24
 71c:	39 1f       	adc	r19, r25
 71e:	8b 81       	ldd	r24, Y+3	; 0x03
 720:	9c 81       	ldd	r25, Y+4	; 0x04
 722:	fc 01       	movw	r30, r24
 724:	e2 0f       	add	r30, r18
 726:	f3 1f       	adc	r31, r19
 728:	40 81       	ld	r20, Z
 72a:	89 81       	ldd	r24, Y+1	; 0x01
 72c:	28 2f       	mov	r18, r24
 72e:	30 e0       	ldi	r19, 0x00	; 0
 730:	c9 01       	movw	r24, r18
 732:	88 0f       	add	r24, r24
 734:	99 1f       	adc	r25, r25
 736:	28 0f       	add	r18, r24
 738:	39 1f       	adc	r19, r25
 73a:	8b 81       	ldd	r24, Y+3	; 0x03
 73c:	9c 81       	ldd	r25, Y+4	; 0x04
 73e:	fc 01       	movw	r30, r24
 740:	e2 0f       	add	r30, r18
 742:	f3 1f       	adc	r31, r19
 744:	91 81       	ldd	r25, Z+1	; 0x01
 746:	84 2f       	mov	r24, r20
 748:	69 2f       	mov	r22, r25
 74a:	40 e0       	ldi	r20, 0x00	; 0
 74c:	0e 94 6d 00 	call	0xda	; 0xda <DIO_enuSetPinDirection>

		 DIO_enuSetPinValue ( Copy_pAstrSwitchConfig[Local_u8Iterator].SW_Port , Copy_pAstrSwitchConfig[Local_u8Iterator].SW_Pin , Copy_pAstrSwitchConfig[Local_u8Iterator].SW_State);      //0,1
 750:	89 81       	ldd	r24, Y+1	; 0x01
 752:	28 2f       	mov	r18, r24
 754:	30 e0       	ldi	r19, 0x00	; 0
 756:	c9 01       	movw	r24, r18
 758:	88 0f       	add	r24, r24
 75a:	99 1f       	adc	r25, r25
 75c:	28 0f       	add	r18, r24
 75e:	39 1f       	adc	r19, r25
 760:	8b 81       	ldd	r24, Y+3	; 0x03
 762:	9c 81       	ldd	r25, Y+4	; 0x04
 764:	fc 01       	movw	r30, r24
 766:	e2 0f       	add	r30, r18
 768:	f3 1f       	adc	r31, r19
 76a:	50 81       	ld	r21, Z
 76c:	89 81       	ldd	r24, Y+1	; 0x01
 76e:	28 2f       	mov	r18, r24
 770:	30 e0       	ldi	r19, 0x00	; 0
 772:	c9 01       	movw	r24, r18
 774:	88 0f       	add	r24, r24
 776:	99 1f       	adc	r25, r25
 778:	28 0f       	add	r18, r24
 77a:	39 1f       	adc	r19, r25
 77c:	8b 81       	ldd	r24, Y+3	; 0x03
 77e:	9c 81       	ldd	r25, Y+4	; 0x04
 780:	fc 01       	movw	r30, r24
 782:	e2 0f       	add	r30, r18
 784:	f3 1f       	adc	r31, r19
 786:	41 81       	ldd	r20, Z+1	; 0x01
 788:	89 81       	ldd	r24, Y+1	; 0x01
 78a:	28 2f       	mov	r18, r24
 78c:	30 e0       	ldi	r19, 0x00	; 0
 78e:	c9 01       	movw	r24, r18
 790:	88 0f       	add	r24, r24
 792:	99 1f       	adc	r25, r25
 794:	28 0f       	add	r18, r24
 796:	39 1f       	adc	r19, r25
 798:	8b 81       	ldd	r24, Y+3	; 0x03
 79a:	9c 81       	ldd	r25, Y+4	; 0x04
 79c:	fc 01       	movw	r30, r24
 79e:	e2 0f       	add	r30, r18
 7a0:	f3 1f       	adc	r31, r19
 7a2:	92 81       	ldd	r25, Z+2	; 0x02
 7a4:	85 2f       	mov	r24, r21
 7a6:	64 2f       	mov	r22, r20
 7a8:	49 2f       	mov	r20, r25
 7aa:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_enuSetPinValue>
ES_T Switch_enuInt(SW_T * Copy_pAstrSwitchConfig)
{
	ES_T Local_enuErrorState = ES_NOK;
	ES_T Local_u8Iterator = 0 ;

	for(Local_u8Iterator =0 ; Local_u8Iterator < Switch_u8SwNum ; Local_u8Iterator++)
 7ae:	89 81       	ldd	r24, Y+1	; 0x01
 7b0:	8f 5f       	subi	r24, 0xFF	; 255
 7b2:	89 83       	std	Y+1, r24	; 0x01
 7b4:	90 91 60 00 	lds	r25, 0x0060
 7b8:	89 81       	ldd	r24, Y+1	; 0x01
 7ba:	89 17       	cp	r24, r25
 7bc:	08 f4       	brcc	.+2      	; 0x7c0 <Switch_enuInt+0xcc>
 7be:	a7 cf       	rjmp	.-178    	; 0x70e <Switch_enuInt+0x1a>

		 DIO_enuSetPinValue ( Copy_pAstrSwitchConfig[Local_u8Iterator].SW_Port , Copy_pAstrSwitchConfig[Local_u8Iterator].SW_Pin , Copy_pAstrSwitchConfig[Local_u8Iterator].SW_State);      //0,1

	};

	return Local_enuErrorState;
 7c0:	8a 81       	ldd	r24, Y+2	; 0x02
};
 7c2:	0f 90       	pop	r0
 7c4:	0f 90       	pop	r0
 7c6:	0f 90       	pop	r0
 7c8:	0f 90       	pop	r0
 7ca:	cf 91       	pop	r28
 7cc:	df 91       	pop	r29
 7ce:	08 95       	ret

000007d0 <Switch_enuGetState>:

ES_T Switch_enuGetState(SW_T * Copy_pstrSwitchInfo , u8 * Copy_pu8Value)
{
 7d0:	df 93       	push	r29
 7d2:	cf 93       	push	r28
 7d4:	00 d0       	rcall	.+0      	; 0x7d6 <Switch_enuGetState+0x6>
 7d6:	00 d0       	rcall	.+0      	; 0x7d8 <Switch_enuGetState+0x8>
 7d8:	0f 92       	push	r0
 7da:	cd b7       	in	r28, 0x3d	; 61
 7dc:	de b7       	in	r29, 0x3e	; 62
 7de:	9b 83       	std	Y+3, r25	; 0x03
 7e0:	8a 83       	std	Y+2, r24	; 0x02
 7e2:	7d 83       	std	Y+5, r23	; 0x05
 7e4:	6c 83       	std	Y+4, r22	; 0x04
	ES_T Local_enuErrorState = ES_NOK;
 7e6:	81 e0       	ldi	r24, 0x01	; 1
 7e8:	89 83       	std	Y+1, r24	; 0x01

	Local_enuErrorState = DIO_enuGetPinValue(Copy_pstrSwitchInfo->SW_Port , Copy_pstrSwitchInfo->SW_Pin , Copy_pu8Value );
 7ea:	ea 81       	ldd	r30, Y+2	; 0x02
 7ec:	fb 81       	ldd	r31, Y+3	; 0x03
 7ee:	80 81       	ld	r24, Z
 7f0:	ea 81       	ldd	r30, Y+2	; 0x02
 7f2:	fb 81       	ldd	r31, Y+3	; 0x03
 7f4:	91 81       	ldd	r25, Z+1	; 0x01
 7f6:	2c 81       	ldd	r18, Y+4	; 0x04
 7f8:	3d 81       	ldd	r19, Y+5	; 0x05
 7fa:	69 2f       	mov	r22, r25
 7fc:	a9 01       	movw	r20, r18
 7fe:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <DIO_enuGetPinValue>
 802:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
 804:	89 81       	ldd	r24, Y+1	; 0x01
};
 806:	0f 90       	pop	r0
 808:	0f 90       	pop	r0
 80a:	0f 90       	pop	r0
 80c:	0f 90       	pop	r0
 80e:	0f 90       	pop	r0
 810:	cf 91       	pop	r28
 812:	df 91       	pop	r29
 814:	08 95       	ret

00000816 <delay>:
#include "Switch_int.h"

extern SW_T SWITCH_AstrSwitchConfig[ SW_NUM ] ;


void delay(void){
 816:	df 93       	push	r29
 818:	cf 93       	push	r28
 81a:	00 d0       	rcall	.+0      	; 0x81c <delay+0x6>
 81c:	00 d0       	rcall	.+0      	; 0x81e <delay+0x8>
 81e:	cd b7       	in	r28, 0x3d	; 61
 820:	de b7       	in	r29, 0x3e	; 62
  for(int x=0 ; x<220 ; x++)
 822:	1c 82       	std	Y+4, r1	; 0x04
 824:	1b 82       	std	Y+3, r1	; 0x03
 826:	13 c0       	rjmp	.+38     	; 0x84e <delay+0x38>
	for(int y=0 ; y<200 ; y++)
 828:	1a 82       	std	Y+2, r1	; 0x02
 82a:	19 82       	std	Y+1, r1	; 0x01
 82c:	06 c0       	rjmp	.+12     	; 0x83a <delay+0x24>
		__asm("NOP");
 82e:	00 00       	nop
extern SW_T SWITCH_AstrSwitchConfig[ SW_NUM ] ;


void delay(void){
  for(int x=0 ; x<220 ; x++)
	for(int y=0 ; y<200 ; y++)
 830:	89 81       	ldd	r24, Y+1	; 0x01
 832:	9a 81       	ldd	r25, Y+2	; 0x02
 834:	01 96       	adiw	r24, 0x01	; 1
 836:	9a 83       	std	Y+2, r25	; 0x02
 838:	89 83       	std	Y+1, r24	; 0x01
 83a:	89 81       	ldd	r24, Y+1	; 0x01
 83c:	9a 81       	ldd	r25, Y+2	; 0x02
 83e:	88 3c       	cpi	r24, 0xC8	; 200
 840:	91 05       	cpc	r25, r1
 842:	ac f3       	brlt	.-22     	; 0x82e <delay+0x18>

extern SW_T SWITCH_AstrSwitchConfig[ SW_NUM ] ;


void delay(void){
  for(int x=0 ; x<220 ; x++)
 844:	8b 81       	ldd	r24, Y+3	; 0x03
 846:	9c 81       	ldd	r25, Y+4	; 0x04
 848:	01 96       	adiw	r24, 0x01	; 1
 84a:	9c 83       	std	Y+4, r25	; 0x04
 84c:	8b 83       	std	Y+3, r24	; 0x03
 84e:	8b 81       	ldd	r24, Y+3	; 0x03
 850:	9c 81       	ldd	r25, Y+4	; 0x04
 852:	8c 3d       	cpi	r24, 0xDC	; 220
 854:	91 05       	cpc	r25, r1
 856:	44 f3       	brlt	.-48     	; 0x828 <delay+0x12>
	for(int y=0 ; y<200 ; y++)
		__asm("NOP");
}
 858:	0f 90       	pop	r0
 85a:	0f 90       	pop	r0
 85c:	0f 90       	pop	r0
 85e:	0f 90       	pop	r0
 860:	cf 91       	pop	r28
 862:	df 91       	pop	r29
 864:	08 95       	ret

00000866 <main>:

int main()
{
 866:	df 93       	push	r29
 868:	cf 93       	push	r28
 86a:	00 d0       	rcall	.+0      	; 0x86c <main+0x6>
 86c:	0f 92       	push	r0
 86e:	cd b7       	in	r28, 0x3d	; 61
 870:	de b7       	in	r29, 0x3e	; 62
  	DIO_enuInit();         /* void in case of prebuild */
 872:	0e 94 41 00 	call	0x82	; 0x82 <DIO_enuInit>

	Switch_enuInt( SWITCH_AstrSwitchConfig);
 876:	81 e6       	ldi	r24, 0x61	; 97
 878:	90 e0       	ldi	r25, 0x00	; 0
 87a:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Switch_enuInt>
		{
	u8 Local_u8Sw1Value;
	u8 Local_u8Sw2Value;
	u8 Local_u8Sw0Value;

	Switch_enuGetState( &SWITCH_AstrSwitchConfig[0] , &Local_u8Sw0Value);
 87e:	81 e6       	ldi	r24, 0x61	; 97
 880:	90 e0       	ldi	r25, 0x00	; 0
 882:	9e 01       	movw	r18, r28
 884:	2d 5f       	subi	r18, 0xFD	; 253
 886:	3f 4f       	sbci	r19, 0xFF	; 255
 888:	b9 01       	movw	r22, r18
 88a:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <Switch_enuGetState>
	Switch_enuGetState( &SWITCH_AstrSwitchConfig[1] , &Local_u8Sw1Value);
 88e:	84 e6       	ldi	r24, 0x64	; 100
 890:	90 e0       	ldi	r25, 0x00	; 0
 892:	9e 01       	movw	r18, r28
 894:	2f 5f       	subi	r18, 0xFF	; 255
 896:	3f 4f       	sbci	r19, 0xFF	; 255
 898:	b9 01       	movw	r22, r18
 89a:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <Switch_enuGetState>
	Switch_enuGetState( &SWITCH_AstrSwitchConfig[2] , &Local_u8Sw2Value);
 89e:	87 e6       	ldi	r24, 0x67	; 103
 8a0:	90 e0       	ldi	r25, 0x00	; 0
 8a2:	9e 01       	movw	r18, r28
 8a4:	2e 5f       	subi	r18, 0xFE	; 254
 8a6:	3f 4f       	sbci	r19, 0xFF	; 255
 8a8:	b9 01       	movw	r22, r18
 8aa:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <Switch_enuGetState>

	if(Local_u8Sw0Value == 1)
 8ae:	8b 81       	ldd	r24, Y+3	; 0x03
 8b0:	81 30       	cpi	r24, 0x01	; 1
 8b2:	a1 f4       	brne	.+40     	; 0x8dc <main+0x76>
	{
		DIO_enuSetPinDirection(DIO_u8PORTC,DIO_u8PIN2,DIO_u8OUTPUT);
 8b4:	82 e0       	ldi	r24, 0x02	; 2
 8b6:	62 e0       	ldi	r22, 0x02	; 2
 8b8:	41 e0       	ldi	r20, 0x01	; 1
 8ba:	0e 94 6d 00 	call	0xda	; 0xda <DIO_enuSetPinDirection>
		DIO_enuSetPinValue(DIO_u8PORTC,DIO_u8PIN2,DIO_u8HIGH);
 8be:	82 e0       	ldi	r24, 0x02	; 2
 8c0:	62 e0       	ldi	r22, 0x02	; 2
 8c2:	41 e0       	ldi	r20, 0x01	; 1
 8c4:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_enuSetPinValue>
		delay();
 8c8:	0e 94 0b 04 	call	0x816	; 0x816 <delay>
		DIO_enuSetPinValue(DIO_u8PORTC,DIO_u8PIN2,DIO_u8LOW);
 8cc:	82 e0       	ldi	r24, 0x02	; 2
 8ce:	62 e0       	ldi	r22, 0x02	; 2
 8d0:	40 e0       	ldi	r20, 0x00	; 0
 8d2:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_enuSetPinValue>
		delay();
 8d6:	0e 94 0b 04 	call	0x816	; 0x816 <delay>
 8da:	d1 cf       	rjmp	.-94     	; 0x87e <main+0x18>
	}
	else if(Local_u8Sw1Value == 1)
 8dc:	89 81       	ldd	r24, Y+1	; 0x01
 8de:	81 30       	cpi	r24, 0x01	; 1
 8e0:	a1 f4       	brne	.+40     	; 0x90a <main+0xa4>
	{
		DIO_enuSetPinDirection(DIO_u8PORTD,DIO_u8PIN3,DIO_u8OUTPUT);
 8e2:	83 e0       	ldi	r24, 0x03	; 3
 8e4:	63 e0       	ldi	r22, 0x03	; 3
 8e6:	41 e0       	ldi	r20, 0x01	; 1
 8e8:	0e 94 6d 00 	call	0xda	; 0xda <DIO_enuSetPinDirection>
		DIO_enuSetPinValue(DIO_u8PORTD,DIO_u8PIN3,DIO_u8HIGH);
 8ec:	83 e0       	ldi	r24, 0x03	; 3
 8ee:	63 e0       	ldi	r22, 0x03	; 3
 8f0:	41 e0       	ldi	r20, 0x01	; 1
 8f2:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_enuSetPinValue>
		delay();
 8f6:	0e 94 0b 04 	call	0x816	; 0x816 <delay>
		DIO_enuSetPinValue(DIO_u8PORTD,DIO_u8PIN3,DIO_u8LOW);
 8fa:	83 e0       	ldi	r24, 0x03	; 3
 8fc:	63 e0       	ldi	r22, 0x03	; 3
 8fe:	40 e0       	ldi	r20, 0x00	; 0
 900:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_enuSetPinValue>
		delay();
 904:	0e 94 0b 04 	call	0x816	; 0x816 <delay>
 908:	ba cf       	rjmp	.-140    	; 0x87e <main+0x18>
	}

	else if(Local_u8Sw2Value == 1)
 90a:	8a 81       	ldd	r24, Y+2	; 0x02
 90c:	81 30       	cpi	r24, 0x01	; 1
 90e:	09 f0       	breq	.+2      	; 0x912 <main+0xac>
 910:	b6 cf       	rjmp	.-148    	; 0x87e <main+0x18>
	{
		DIO_enuSetPinDirection(DIO_u8PORTC,DIO_u8PIN7,DIO_u8OUTPUT);
 912:	82 e0       	ldi	r24, 0x02	; 2
 914:	67 e0       	ldi	r22, 0x07	; 7
 916:	41 e0       	ldi	r20, 0x01	; 1
 918:	0e 94 6d 00 	call	0xda	; 0xda <DIO_enuSetPinDirection>
		DIO_enuSetPinValue(DIO_u8PORTC,DIO_u8PIN7,DIO_u8HIGH);
 91c:	82 e0       	ldi	r24, 0x02	; 2
 91e:	67 e0       	ldi	r22, 0x07	; 7
 920:	41 e0       	ldi	r20, 0x01	; 1
 922:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_enuSetPinValue>
		delay();
 926:	0e 94 0b 04 	call	0x816	; 0x816 <delay>
		DIO_enuSetPinValue(DIO_u8PORTC,DIO_u8PIN7,DIO_u8LOW);
 92a:	82 e0       	ldi	r24, 0x02	; 2
 92c:	67 e0       	ldi	r22, 0x07	; 7
 92e:	40 e0       	ldi	r20, 0x00	; 0
 930:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_enuSetPinValue>
		delay();
 934:	0e 94 0b 04 	call	0x816	; 0x816 <delay>
 938:	a2 cf       	rjmp	.-188    	; 0x87e <main+0x18>

0000093a <_exit>:
 93a:	f8 94       	cli

0000093c <__stop_program>:
 93c:	ff cf       	rjmp	.-2      	; 0x93c <__stop_program>
